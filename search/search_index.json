{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Flexitext is a Python library that makes it easier to draw text with multiple styles in Matplotlib. This library is inspired and influenced by the R package ggtext . Installation \u00b6 Flexitext requires a working Python interpreter (3.6+). This library can be installed using pip: pip install flexitext Alternatively, you can install the development version from GitHub: pip install git+https://github.com/tomicapretto/flexitext.git Flexitext only requires Matplotlib version 3.4 or higher. Overview \u00b6 Albeit being inspired on ggtext , Flexitext does not use HTML, CSS, or Markdown to specify text styles. On the contrary, it implements a tag-based styling that looks similar to HTML tags, but is not exactly like HTML. These formatted strings consist of three components: An opening tag that defines the styles to apply. The text to be styled. A closing tag, indicating the extent to which the styles in the opening tag apply. Let's see an example: \"<color:blue, size:16>This is blue text</> and this is regular text\" <color:blue, size:16> is the opening tag. Styles are key-value pairs separated by : . Multiple styles are separated by commas. This is blue text is the text block. This text is going to be drawn using a font size of 16 and blue color. </> is the closing tag. Only the text within the opening and the closing tags is formatted. And finally we have and this is regular text . This is going to be drawn using the default style because it is not contained within any formatting tags. Examples \u00b6 The easiest way to use flexitext is through the flexitext function. import matplotlib as mpl import matplotlib.pyplot as plt from flexitext import flexitext mpl . rcParams [ 'figure.facecolor' ] = 'w' fig , ax = plt . subplots ( figsize = ( 9 , 6 )) text = \"Normal text\" ax . text ( 0.5 , 0.7 , text , size = 24 , ha = \"center\" ) text = \"<weight:bold, size:24>Bold text</>\" flexitext ( 0.5 , 0.6 , text , ha = \"center\" ) text = \"<style:italic, size:24>Italic text</>\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ) text = \"<weight:bold, size:24>Bold and</> <style:italic, size:24>italic too!</>\" flexitext ( 0.5 , 0.4 , text , ha = \"center\" ); Styles can be nested fig , ax = plt . subplots ( figsize = ( 9 , 6 )) text = \"<size:28, color:royalblue>It is much <weight:bold>easier </><style:italic>now</></>\" flexitext ( 0.5 , 0.6 , text , ha = \"center\" ); A more convoluted example: text = ( \"<size:28, color:blueviolet, name:Montserrat>You can write using \\n </>\" \"<color:grey, size:24>multiple formats, \\n and linebreaks \\n\\n \" \"<color:royalblue, name:Montserrat>also <weight:bold>bold text \\n\\n </></>\" \"<name:Montserrat>and why not <color:royalblue, style:italic>italics</> too</></>\" ) fig , ax = plt . subplots ( figsize = ( 9 , 6 )) flexitext ( 0.5 , 0.5 , text , ha = \"center\" , ma = \"center\" ); Use the figure fraction coordinates to write a formatted title. fig , ax = plt . subplots ( figsize = ( 9 , 6 )) fig . subplots_adjust ( top = 0.8 , left = 0.025 ) x = [ 1 , 2 , 3 ] y_blue = [ 2 , 2.7 , 4.5 ] y_red = [ 1 , 3 , 2.5 ] ax . scatter ( x , y_blue , color = \"royalblue\" , s = 120 ) ax . scatter ( x , y_red , color = \"crimson\" , s = 120 ) # Add flexitext text = ( \"<name:Montserrat><size:24>A <weight:bold>great chart</> showing</> \\n \" \"<size:18>the values for the \" \"<color:royalblue, weight:bold>blues</> and the <color:crimson, weight:bold>reds</></></>\" ) flexitext ( 0.025 , 0.8 , text , va = \"bottom\" , xycoords = \"figure fraction\" ); Notes \u00b6 Flexitext only supports the following styles alpha backgroundcolor color family name size style weight See Matplotlib's documentation for more information about their meaning and available values. Flexitext logo is created with Flexitext and Matplotlib (see here ). Related work \u00b6 highlight_text : Flexitext and highlight_text have similar goals. This library, highlight_text, allows you to customize more aspects of the highlighted text, such as the bounding box of the text or the border of the text with path effects. On the other hand, it requires you to pass a styles as a separated list of dictionaries instead of within the text.","title":"Introduction"},{"location":"#introduction","text":"Flexitext is a Python library that makes it easier to draw text with multiple styles in Matplotlib. This library is inspired and influenced by the R package ggtext .","title":"Introduction"},{"location":"#installation","text":"Flexitext requires a working Python interpreter (3.6+). This library can be installed using pip: pip install flexitext Alternatively, you can install the development version from GitHub: pip install git+https://github.com/tomicapretto/flexitext.git Flexitext only requires Matplotlib version 3.4 or higher.","title":"Installation"},{"location":"#overview","text":"Albeit being inspired on ggtext , Flexitext does not use HTML, CSS, or Markdown to specify text styles. On the contrary, it implements a tag-based styling that looks similar to HTML tags, but is not exactly like HTML. These formatted strings consist of three components: An opening tag that defines the styles to apply. The text to be styled. A closing tag, indicating the extent to which the styles in the opening tag apply. Let's see an example: \"<color:blue, size:16>This is blue text</> and this is regular text\" <color:blue, size:16> is the opening tag. Styles are key-value pairs separated by : . Multiple styles are separated by commas. This is blue text is the text block. This text is going to be drawn using a font size of 16 and blue color. </> is the closing tag. Only the text within the opening and the closing tags is formatted. And finally we have and this is regular text . This is going to be drawn using the default style because it is not contained within any formatting tags.","title":"Overview"},{"location":"#examples","text":"The easiest way to use flexitext is through the flexitext function. import matplotlib as mpl import matplotlib.pyplot as plt from flexitext import flexitext mpl . rcParams [ 'figure.facecolor' ] = 'w' fig , ax = plt . subplots ( figsize = ( 9 , 6 )) text = \"Normal text\" ax . text ( 0.5 , 0.7 , text , size = 24 , ha = \"center\" ) text = \"<weight:bold, size:24>Bold text</>\" flexitext ( 0.5 , 0.6 , text , ha = \"center\" ) text = \"<style:italic, size:24>Italic text</>\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ) text = \"<weight:bold, size:24>Bold and</> <style:italic, size:24>italic too!</>\" flexitext ( 0.5 , 0.4 , text , ha = \"center\" ); Styles can be nested fig , ax = plt . subplots ( figsize = ( 9 , 6 )) text = \"<size:28, color:royalblue>It is much <weight:bold>easier </><style:italic>now</></>\" flexitext ( 0.5 , 0.6 , text , ha = \"center\" ); A more convoluted example: text = ( \"<size:28, color:blueviolet, name:Montserrat>You can write using \\n </>\" \"<color:grey, size:24>multiple formats, \\n and linebreaks \\n\\n \" \"<color:royalblue, name:Montserrat>also <weight:bold>bold text \\n\\n </></>\" \"<name:Montserrat>and why not <color:royalblue, style:italic>italics</> too</></>\" ) fig , ax = plt . subplots ( figsize = ( 9 , 6 )) flexitext ( 0.5 , 0.5 , text , ha = \"center\" , ma = \"center\" ); Use the figure fraction coordinates to write a formatted title. fig , ax = plt . subplots ( figsize = ( 9 , 6 )) fig . subplots_adjust ( top = 0.8 , left = 0.025 ) x = [ 1 , 2 , 3 ] y_blue = [ 2 , 2.7 , 4.5 ] y_red = [ 1 , 3 , 2.5 ] ax . scatter ( x , y_blue , color = \"royalblue\" , s = 120 ) ax . scatter ( x , y_red , color = \"crimson\" , s = 120 ) # Add flexitext text = ( \"<name:Montserrat><size:24>A <weight:bold>great chart</> showing</> \\n \" \"<size:18>the values for the \" \"<color:royalblue, weight:bold>blues</> and the <color:crimson, weight:bold>reds</></></>\" ) flexitext ( 0.025 , 0.8 , text , va = \"bottom\" , xycoords = \"figure fraction\" );","title":"Examples"},{"location":"#notes","text":"Flexitext only supports the following styles alpha backgroundcolor color family name size style weight See Matplotlib's documentation for more information about their meaning and available values. Flexitext logo is created with Flexitext and Matplotlib (see here ).","title":"Notes"},{"location":"#related-work","text":"highlight_text : Flexitext and highlight_text have similar goals. This library, highlight_text, allows you to customize more aspects of the highlighted text, such as the bounding box of the text or the border of the text with path effects. On the other hand, it requires you to pass a styles as a separated list of dictionaries instead of within the text.","title":"Related work"},{"location":"reference/","text":"Reference \u00b6","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/FlexiText/","text":"Handle storing and drawing of formatted text. Parameters: Name Type Description Default texts tuple or list of flexitext.Text instances These objects represent the text together with their styles. required plot ( self , x , y , ha = 'left' , va = 'center' , ma = 'left' , mva = 'baseline' , xycoords = 'axes fraction' , ax = None ) \u00b6 Draw text with multiple formats. Parameters: Name Type Description Default x float The horizontal position to place the text. By default, this is in axes fraction coordinates. required y float The vertical position to place the text. By default, this is in axes fraction coordinates. required ha str Horizontal alignment. Must be one of 'center' , 'right' , or 'left' . 'left' va str Horizontal alignment. Must be one of 'center' , 'top' , or 'bottom' . 'center' ma str Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the ha and va properties. This property controls the alignment of the text lines within that box. 'left' mva str Vertical alignment for text within multiline texts. Can be one of \"top\" , \"bottom\" , \"left\" , \"right\" , \"center\" , or \"baseline\" . Defaults to \"baseline\" . 'baseline' xycoords str The coordinate system for x and y . Must be one of 'axes fraction' or 'figure fraction' . 'axes fraction' ax matplotlib.axes.Axes Matplotlib Axes . The default value means the Axes is obtained with plt.gca() None Source code in flexitext/flexitext.py def plot ( self , x , y , ha = \"left\" , va = \"center\" , ma = \"left\" , mva = \"baseline\" , xycoords = \"axes fraction\" , ax = None , ): \"\"\"Draw text with multiple formats. Parameters ---------- x: float The horizontal position to place the text. By default, this is in axes fraction coordinates. y: float The vertical position to place the text. By default, this is in axes fraction coordinates. ha: str Horizontal alignment. Must be one of `'center'`, `'right'`, or `'left'`. va: str Horizontal alignment. Must be one of `'center'`, `'top'`, or `'bottom'`. ma: str Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the `ha` and `va` properties. This property controls the alignment of the text lines within that box. mva: str Vertical alignment for text within multiline texts. Can be one of `\"top\"`, `\"bottom\"`, `\"left\"`, `\"right\"`, `\"center\"`, or `\"baseline\"`. Defaults to `\"baseline\"`. xycoords: str The coordinate system for `x` and `y`. Must be one of `'axes fraction'` or `'figure fraction'`. ax: matplotlib.axes.Axes Matplotlib `Axes`. The default value means the `Axes` is obtained with `plt.gca()` Returns ------- annotation_box: matplotlib.offsetbox.AnnotationBbox \"\"\" if ax is None : ax = plt . gca () if xycoords == \"axes fraction\" : parent = ax elif xycoords == \"figure fraction\" : parent = ax . figure xycoords = ax . figure . transFigure else : raise ValueError ( f \"'xycoords' must be one of 'axes fraction' or 'figure fraction', not { xycoords } \" ) offsetbox = self . _make_offset_box ( ma , mva ) box_alignment = self . _make_box_alignment ( ha , va ) annotation_box = AnnotationBbox ( offsetbox , ( x , y ), xycoords = xycoords , frameon = False , box_alignment = box_alignment , pad = 0 , ) parent . add_artist ( annotation_box ) return annotation_box","title":"FlexiText"},{"location":"reference/FlexiText/#flexitext.flexitext.FlexiText.plot","text":"Draw text with multiple formats. Parameters: Name Type Description Default x float The horizontal position to place the text. By default, this is in axes fraction coordinates. required y float The vertical position to place the text. By default, this is in axes fraction coordinates. required ha str Horizontal alignment. Must be one of 'center' , 'right' , or 'left' . 'left' va str Horizontal alignment. Must be one of 'center' , 'top' , or 'bottom' . 'center' ma str Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the ha and va properties. This property controls the alignment of the text lines within that box. 'left' mva str Vertical alignment for text within multiline texts. Can be one of \"top\" , \"bottom\" , \"left\" , \"right\" , \"center\" , or \"baseline\" . Defaults to \"baseline\" . 'baseline' xycoords str The coordinate system for x and y . Must be one of 'axes fraction' or 'figure fraction' . 'axes fraction' ax matplotlib.axes.Axes Matplotlib Axes . The default value means the Axes is obtained with plt.gca() None Source code in flexitext/flexitext.py def plot ( self , x , y , ha = \"left\" , va = \"center\" , ma = \"left\" , mva = \"baseline\" , xycoords = \"axes fraction\" , ax = None , ): \"\"\"Draw text with multiple formats. Parameters ---------- x: float The horizontal position to place the text. By default, this is in axes fraction coordinates. y: float The vertical position to place the text. By default, this is in axes fraction coordinates. ha: str Horizontal alignment. Must be one of `'center'`, `'right'`, or `'left'`. va: str Horizontal alignment. Must be one of `'center'`, `'top'`, or `'bottom'`. ma: str Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the `ha` and `va` properties. This property controls the alignment of the text lines within that box. mva: str Vertical alignment for text within multiline texts. Can be one of `\"top\"`, `\"bottom\"`, `\"left\"`, `\"right\"`, `\"center\"`, or `\"baseline\"`. Defaults to `\"baseline\"`. xycoords: str The coordinate system for `x` and `y`. Must be one of `'axes fraction'` or `'figure fraction'`. ax: matplotlib.axes.Axes Matplotlib `Axes`. The default value means the `Axes` is obtained with `plt.gca()` Returns ------- annotation_box: matplotlib.offsetbox.AnnotationBbox \"\"\" if ax is None : ax = plt . gca () if xycoords == \"axes fraction\" : parent = ax elif xycoords == \"figure fraction\" : parent = ax . figure xycoords = ax . figure . transFigure else : raise ValueError ( f \"'xycoords' must be one of 'axes fraction' or 'figure fraction', not { xycoords } \" ) offsetbox = self . _make_offset_box ( ma , mva ) box_alignment = self . _make_box_alignment ( ha , va ) annotation_box = AnnotationBbox ( offsetbox , ( x , y ), xycoords = xycoords , frameon = False , box_alignment = box_alignment , pad = 0 , ) parent . add_artist ( annotation_box ) return annotation_box","title":"plot()"},{"location":"reference/Style/","text":"Style container Stores values for the styles that can be applied to texts. Examples: >>> style = Style ( color = 'blue' , size = 18 , alpha = 0.6 ) >>> text = style ( \"This is blue text\" ) __call__ ( self , string ) special \u00b6 Return a Text instance using styles from this object. Source code in flexitext/style.py def __call__ ( self , string ): \"\"\"Return a Text instance using styles from this object.\"\"\" return Text ( string , self )","title":"Style"},{"location":"reference/Style/#flexitext.style.Style.__call__","text":"Return a Text instance using styles from this object. Source code in flexitext/style.py def __call__ ( self , string ): \"\"\"Return a Text instance using styles from this object.\"\"\" return Text ( string , self )","title":"__call__()"},{"location":"reference/Text/","text":"Stores content and styles for a formatted text.","title":"Text"},{"location":"reference/flexitext/","text":"Draw text with multiple formats. Parameters: Name Type Description Default x float The horizontal position to place the text. By default, this is in axes fraction coordinates. required y float The vertical position to place the text. By default, this is in axes fraction coordinates. required ha str Horizontal alignment. Must be one of 'center' , 'right' , or 'left' . 'left' va str Horizontal alignment. Must be one of 'center' , 'top' , or 'bottom' . 'center' ma str Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the ha and va properties. This property controls the alignment of the text lines within that box. 'left' mva str Vertical alignment for text within multiline texts. Can be one of \"top\" , \"bottom\" , \"left\" , \"right\" , \"center\" , or \"baseline\" . Defaults to \"baseline\" . 'baseline' xycoords str The coordinate system for x and y . Must be one of 'axes fraction' or 'figure fraction' . 'axes fraction' ax matplotlib.axes.Axes Matplotlib Axes . The default value means the Axes is obtained with plt.gca() None Source code in flexitext/flexitext.py def flexitext ( x , y , s , ha = \"left\" , va = \"center\" , ma = \"left\" , mva = \"baseline\" , xycoords = \"axes fraction\" , ax = None ): \"\"\"Draw text with multiple formats. Parameters ---------- x: float The horizontal position to place the text. By default, this is in axes fraction coordinates. y: float The vertical position to place the text. By default, this is in axes fraction coordinates. ha: str Horizontal alignment. Must be one of `'center'`, `'right'`, or `'left'`. va: str Horizontal alignment. Must be one of `'center'`, `'top'`, or `'bottom'`. ma: str Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the `ha` and `va` properties. This property controls the alignment of the text lines within that box. mva: str Vertical alignment for text within multiline texts. Can be one of `\"top\"`, `\"bottom\"`, `\"left\"`, `\"right\"`, `\"center\"`, or `\"baseline\"`. Defaults to `\"baseline\"`. xycoords: str The coordinate system for `x` and `y`. Must be one of `'axes fraction'` or `'figure fraction'`. ax: matplotlib.axes.Axes Matplotlib `Axes`. The default value means the `Axes` is obtained with `plt.gca()` Returns ------- annotation_box: matplotlib.offsetbox.AnnotationBbox \"\"\" return FlexiText ( * make_texts ( s )) . plot ( x , y , ha , va , ma , mva , xycoords , ax )","title":"flexitext"},{"location":"usage/","text":"Overview \u00b6 Flexitext provides two interfaces to draw text with a variety of styles in Matplotlib plots. Functional: Takes a formatted string and draws the formatted text. This parses the formatted string and then uses classes from the OOP interface under the hood. Object-Oriented: This does not involve any parsing step, but requires you to create the text objects either by hand or programatically. This is useful if you want to re-use styles without having to manipulate Python strings.","title":"Overview"},{"location":"usage/#overview","text":"Flexitext provides two interfaces to draw text with a variety of styles in Matplotlib plots. Functional: Takes a formatted string and draws the formatted text. This parses the formatted string and then uses classes from the OOP interface under the hood. Object-Oriented: This does not involve any parsing step, but requires you to create the text objects either by hand or programatically. This is useful if you want to re-use styles without having to manipulate Python strings.","title":"Overview"},{"location":"usage/OOP/","text":"Object-Oriented Interface \u00b6 Flexitext provides the FlexiText() class. This class is wrapped by the flexitext() function to provide the functional implementation. Unlike the functional implementation, this class based implementation does not work with formatted strings. It works with instances of the class flexitext.Text . These are lower level objects that contain both the text and the styles, given by an instance of flexitext.Style . Setup \u00b6 import matplotlib as mpl import matplotlib.pyplot as plt from flexitext import FlexiText , Style mpl . rcParams [ \"figure.figsize\" ] = ( 6 , 4 ) mpl . rcParams [ \"figure.dpi\" ] = 120 Style class \u00b6 The Style class stores styles that are applied to some text. Its arguments are the names of the styles supported (see here ). style = Style ( color = \"blueviolet\" , size = 18 , name = \"Montserrat\" ) print ( style ) Style(color=blueviolet, name=Montserrat, size=18) This style object can be called with a string we would like to format and it returns an instance of flexitext.Text . text = style ( \"Styled text\" ) print ( text ) Styled text print ( text . style ) Style(color=blueviolet, name=Montserrat, size=18) FlexiText class \u00b6 FlexiText objects are created with a variable number of Text objects. Then we call the .plot() method, which accepts the same arguments than flexitext() , and draw the all the texts with their corresponding styles. fig , ax = plt . subplots () FlexiText ( text ) . plot ( 0.5 , 0.5 , ha = \"center\" ); This interface allows us to re-use styles. style2 = Style ( size = 14 , name = \"Montserrat\" ) fig , ax = plt . subplots () ft = FlexiText ( style ( \"Styled text \\n \" ), style2 ( \"Another style \\n \" ), style ( \"Reuse original style\" ) ) ft . plot ( 0.5 , 0.5 , ha = \"center\" ); More examples \u00b6 The object-oriented interface is useful when you want to create styles in a programatically way without dealing with strings and when you want to re-use those styles. Let's see an example: RAINBOW_COLORS = [ \"#FF6663\" , \"#FEB144\" , \"#FDFD97\" , \"#9EE09E\" , \"#9EC1CF\" , \"#CC99C9\" , \"#CCA0F0\" ] # Create list of styles styles = [ Style ( size = 72 , color = color , name = \"Gluten\" , weight = 600 ) for color in RAINBOW_COLORS ] # Create lists of texts texts1 = [ s ( letter ) for s , letter in zip ( styles , \"Rainbow\" )] texts2 = [ s ( letter ) for s , letter in zip ( styles , \"Palette\" )] # Create plot fig , ax = plt . subplots () FlexiText ( * texts1 ) . plot ( 0.5 , 0.65 , ha = \"center\" ); FlexiText ( * texts2 ) . plot ( 0.5 , 0.35 , ha = \"center\" );","title":"OOP"},{"location":"usage/OOP/#object-oriented-interface","text":"Flexitext provides the FlexiText() class. This class is wrapped by the flexitext() function to provide the functional implementation. Unlike the functional implementation, this class based implementation does not work with formatted strings. It works with instances of the class flexitext.Text . These are lower level objects that contain both the text and the styles, given by an instance of flexitext.Style .","title":"Object-Oriented Interface"},{"location":"usage/OOP/#setup","text":"import matplotlib as mpl import matplotlib.pyplot as plt from flexitext import FlexiText , Style mpl . rcParams [ \"figure.figsize\" ] = ( 6 , 4 ) mpl . rcParams [ \"figure.dpi\" ] = 120","title":"Setup"},{"location":"usage/OOP/#style-class","text":"The Style class stores styles that are applied to some text. Its arguments are the names of the styles supported (see here ). style = Style ( color = \"blueviolet\" , size = 18 , name = \"Montserrat\" ) print ( style ) Style(color=blueviolet, name=Montserrat, size=18) This style object can be called with a string we would like to format and it returns an instance of flexitext.Text . text = style ( \"Styled text\" ) print ( text ) Styled text print ( text . style ) Style(color=blueviolet, name=Montserrat, size=18)","title":"Style class"},{"location":"usage/OOP/#flexitext-class","text":"FlexiText objects are created with a variable number of Text objects. Then we call the .plot() method, which accepts the same arguments than flexitext() , and draw the all the texts with their corresponding styles. fig , ax = plt . subplots () FlexiText ( text ) . plot ( 0.5 , 0.5 , ha = \"center\" ); This interface allows us to re-use styles. style2 = Style ( size = 14 , name = \"Montserrat\" ) fig , ax = plt . subplots () ft = FlexiText ( style ( \"Styled text \\n \" ), style2 ( \"Another style \\n \" ), style ( \"Reuse original style\" ) ) ft . plot ( 0.5 , 0.5 , ha = \"center\" );","title":"FlexiText class"},{"location":"usage/OOP/#more-examples","text":"The object-oriented interface is useful when you want to create styles in a programatically way without dealing with strings and when you want to re-use those styles. Let's see an example: RAINBOW_COLORS = [ \"#FF6663\" , \"#FEB144\" , \"#FDFD97\" , \"#9EE09E\" , \"#9EC1CF\" , \"#CC99C9\" , \"#CCA0F0\" ] # Create list of styles styles = [ Style ( size = 72 , color = color , name = \"Gluten\" , weight = 600 ) for color in RAINBOW_COLORS ] # Create lists of texts texts1 = [ s ( letter ) for s , letter in zip ( styles , \"Rainbow\" )] texts2 = [ s ( letter ) for s , letter in zip ( styles , \"Palette\" )] # Create plot fig , ax = plt . subplots () FlexiText ( * texts1 ) . plot ( 0.5 , 0.65 , ha = \"center\" ); FlexiText ( * texts2 ) . plot ( 0.5 , 0.35 , ha = \"center\" );","title":"More examples"},{"location":"usage/functional/","text":"Functional interface \u00b6 Flexitext provides the flexitext() function. With the exception of the formatted strings, it works in the same way than the .text() method on Matplotlib's Axes objects. You can see its full documentation here . Setup \u00b6 import matplotlib as mpl import matplotlib.pyplot as plt from flexitext import flexitext mpl . rcParams [ \"figure.figsize\" ] = ( 6 , 4 ) mpl . rcParams [ \"figure.dpi\" ] = 120 Formatted strings \u00b6 Albeit being inspired on ggtext , Flexitext does not use HTML, CSS, or Markdown to specify text styles. On the contrary, it implements a tag-based styling that looks similar to HTML tags, but is not exactly like HTML. These formatted strings consist of three components: An opening tag that defines the styles to apply. The text to be styled. A closing tag, indicating the extent to which the styles in the opening tag apply. Let's see an example: \"<color:blue, size:16>This is blue text</> and this is regular text\" <color:blue, size:16> is the opening tag. Styles are key-value pairs separated by : . Multiple styles are separated by commas. This is blue text is the text block. This text is going to be drawn using a font size of 16 and blue color. </> is the closing tag. Only the text within the opening and the closing tags is formatted. And finally we have and this is regular text . This is going to be drawn using the default style because it is not contained within any formatting tags. fig , ax = plt . subplots () text = \"<color:blue, size:16>This is blue text</> and this is regular text\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ); Additionally, styles can be nested. If you define a styled block within the text component of an other styled block, the inner is formatted according to the combination of both styles. For example: fig , ax = plt . subplots () text = \"<color:blue, size:16>Everything is blue, but <weight:bold>this is also bold</></>\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ); Notice the innermost style overrides settings from the outer one. fig , ax = plt . subplots () text = \"<color:blue, weight:bold>Everything is bold, <color:red>but this is red</></>\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ); More examples \u00b6 Flexitext supports a variety of styles. You can change color, transparency, font, style, weight, etc. The following examples showcase how to customize text in different ways using flexitext() and formatted strings. fig , ax = plt . subplots () flexitext ( 0.05 , 0.9 , \"<size:14, color:#ff5c67>Mix <weight:bold>bold</> and <weight:light>light</></>\" ) flexitext ( 0.05 , 0.8 , \"<size:12>Highlight <weight:bold, color:#64a5ff>information</></>\" ) text = ( \"<size:12, name:Lato>Use breaklines \\n \" \"and make text \\n <size:36>BIGGER</> \\n \" \"<size:12>and also smaller</></>\" ) flexitext ( 0.5 , 0.5 , text , ha = \"center\" , ma = \"center\" ) text = ( \"<size:18, name:Lobster Two>Align text as \" \"<color:#ffb382, weight:bold, name:Special Elite>usual</></>\" ) flexitext ( 1 , 0 , text , ha = \"right\" , va = \"bottom\" ); fig , ax = plt . subplots () fig . subplots_adjust ( top = 0.8 ) flexitext ( 0 , 1 , \"<size:22><color:red>Axes</> fraction</>\" , va = \"top\" ); flexitext ( 0.9 , 0.82 , \"<size:22><color:red>Figure</> fraction</>\" , va = \"bottom\" , ha = \"right\" , xycoords = \"figure fraction\" ) flexitext ( 0.9 , 0.02 , \"Usefool for <style:italic, weight:bold>captions</>\" , ha = \"right\" , xycoords = \"figure fraction\" ) flexitext ( 0.5 , 0.6 , \"<size:22>Some <alpha:0.3>transparency</></>\" , ha = \"center\" ) flexitext ( 0.5 , 0.4 , \"<size:22>And <family:monospace, color:red>monospace</> too</>\" , ha = \"center\" ) text = \"<size:14>break</> \\n <size:12>break</> \\n <size:10>break</>\" flexitext ( 0 , 0 , text , va = \"bottom\" ); flexitext ( 0.5 , 0 , text , ha = \"center\" , ma = \"center\" , va = \"bottom\" ); flexitext ( 1 , 0 , text , ha = \"right\" , ma = \"right\" , va = \"bottom\" );","title":"Functional"},{"location":"usage/functional/#functional-interface","text":"Flexitext provides the flexitext() function. With the exception of the formatted strings, it works in the same way than the .text() method on Matplotlib's Axes objects. You can see its full documentation here .","title":"Functional interface"},{"location":"usage/functional/#setup","text":"import matplotlib as mpl import matplotlib.pyplot as plt from flexitext import flexitext mpl . rcParams [ \"figure.figsize\" ] = ( 6 , 4 ) mpl . rcParams [ \"figure.dpi\" ] = 120","title":"Setup"},{"location":"usage/functional/#formatted-strings","text":"Albeit being inspired on ggtext , Flexitext does not use HTML, CSS, or Markdown to specify text styles. On the contrary, it implements a tag-based styling that looks similar to HTML tags, but is not exactly like HTML. These formatted strings consist of three components: An opening tag that defines the styles to apply. The text to be styled. A closing tag, indicating the extent to which the styles in the opening tag apply. Let's see an example: \"<color:blue, size:16>This is blue text</> and this is regular text\" <color:blue, size:16> is the opening tag. Styles are key-value pairs separated by : . Multiple styles are separated by commas. This is blue text is the text block. This text is going to be drawn using a font size of 16 and blue color. </> is the closing tag. Only the text within the opening and the closing tags is formatted. And finally we have and this is regular text . This is going to be drawn using the default style because it is not contained within any formatting tags. fig , ax = plt . subplots () text = \"<color:blue, size:16>This is blue text</> and this is regular text\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ); Additionally, styles can be nested. If you define a styled block within the text component of an other styled block, the inner is formatted according to the combination of both styles. For example: fig , ax = plt . subplots () text = \"<color:blue, size:16>Everything is blue, but <weight:bold>this is also bold</></>\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" ); Notice the innermost style overrides settings from the outer one. fig , ax = plt . subplots () text = \"<color:blue, weight:bold>Everything is bold, <color:red>but this is red</></>\" flexitext ( 0.5 , 0.5 , text , ha = \"center\" );","title":"Formatted strings"},{"location":"usage/functional/#more-examples","text":"Flexitext supports a variety of styles. You can change color, transparency, font, style, weight, etc. The following examples showcase how to customize text in different ways using flexitext() and formatted strings. fig , ax = plt . subplots () flexitext ( 0.05 , 0.9 , \"<size:14, color:#ff5c67>Mix <weight:bold>bold</> and <weight:light>light</></>\" ) flexitext ( 0.05 , 0.8 , \"<size:12>Highlight <weight:bold, color:#64a5ff>information</></>\" ) text = ( \"<size:12, name:Lato>Use breaklines \\n \" \"and make text \\n <size:36>BIGGER</> \\n \" \"<size:12>and also smaller</></>\" ) flexitext ( 0.5 , 0.5 , text , ha = \"center\" , ma = \"center\" ) text = ( \"<size:18, name:Lobster Two>Align text as \" \"<color:#ffb382, weight:bold, name:Special Elite>usual</></>\" ) flexitext ( 1 , 0 , text , ha = \"right\" , va = \"bottom\" ); fig , ax = plt . subplots () fig . subplots_adjust ( top = 0.8 ) flexitext ( 0 , 1 , \"<size:22><color:red>Axes</> fraction</>\" , va = \"top\" ); flexitext ( 0.9 , 0.82 , \"<size:22><color:red>Figure</> fraction</>\" , va = \"bottom\" , ha = \"right\" , xycoords = \"figure fraction\" ) flexitext ( 0.9 , 0.02 , \"Usefool for <style:italic, weight:bold>captions</>\" , ha = \"right\" , xycoords = \"figure fraction\" ) flexitext ( 0.5 , 0.6 , \"<size:22>Some <alpha:0.3>transparency</></>\" , ha = \"center\" ) flexitext ( 0.5 , 0.4 , \"<size:22>And <family:monospace, color:red>monospace</> too</>\" , ha = \"center\" ) text = \"<size:14>break</> \\n <size:12>break</> \\n <size:10>break</>\" flexitext ( 0 , 0 , text , va = \"bottom\" ); flexitext ( 0.5 , 0 , text , ha = \"center\" , ma = \"center\" , va = \"bottom\" ); flexitext ( 1 , 0 , text , ha = \"right\" , ma = \"right\" , va = \"bottom\" );","title":"More examples"}]}